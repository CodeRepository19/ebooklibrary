// <auto-generated />
using System;
using EbookInfraData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EbookInfraData.Migrations
{
    [DbContext(typeof(ebooklibraryDBcontext))]
    [Migration("20190722151009_IntialSetup")]
    partial class IntialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EbookDomain.Models.ApprovalStatus", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalText")
                        .IsRequired();

                    b.HasKey("ApprovalId");

                    b.ToTable("ApprovalStatus");
                });

            modelBuilder.Entity("EbookDomain.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalId");

                    b.Property<string>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ImageUrl");

                    b.Property<int>("TechnologyId");

                    b.HasKey("BookId");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("EbookDomain.Models.Reviewes", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.ToTable("Reviewes");
                });

            modelBuilder.Entity("EbookDomain.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TechnologyDomain")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TechnologyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TechnologyId");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("EbookDomain.Models.Book", b =>
                {
                    b.HasOne("EbookDomain.Models.ApprovalStatus", "approvalStatus")
                        .WithMany("Books")
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EbookDomain.Models.Technology", "technology")
                        .WithMany("Books")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EbookDomain.Models.Reviewes", b =>
                {
                    b.HasOne("EbookDomain.Models.Book", "book")
                        .WithMany("reviewes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
